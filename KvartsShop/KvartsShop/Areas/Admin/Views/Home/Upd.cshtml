@model KvartsShop.Models.Product

@{
    ViewBag.Title = "Upd";
}

@using KvartsShop.Models
@using KvartsShop.Models.Context

@{
    DataContext db = new DataContext();
    List<Catalog> catalogs = db.Catalogs.ToList<Catalog>();
    List<SubCatalog> sc = db.SubCatalogs.ToList<SubCatalog>();
    List<SubSubCatalog> ssc = db.SubSubCatalogs.ToList<SubSubCatalog>();
}

<h2>Update</h2>

@using (Html.BeginForm("Upd", "Home", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Product</h4>
        <hr />
        <input type="hidden" value="@Model.Id" />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)

        <div class="form-group">
            @Html.LabelFor(model => model.Brand, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Brand, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Brand, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label for="file" class="control-label col-md-2" style="margin-right:10px;">Image</label>
            <input type="file" class="form-control-file" name="File" id="File" style="margin-left:10px;">
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.FullDescription, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.FullDescription, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FullDescription, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label for="CatalogId" class="control-label col-md-2" style="margin-right:10px;">Catalog</label>
            <select name="CatalogId" class="form-control" id="select_catalog" style="margin-left:10px;">
                @foreach (var catalog in catalogs)
                {
                    <option value="@catalog.Id">
                        @catalog.Name
                    </option>
                }
            </select>
        </div>

        <div class="form-group">
            <label for="SubCatalogId" class="control-label col-md-2" style="margin-right:10px;">SubCatalog</label>
            <select name="SubCatalogId" class="form-control" id="select_subcatalog" style="margin-left:10px;"></select>
        </div>

        <div class="form-group">
            <label for="SubSubCatalogId" class="control-label col-md-2" style="margin-right:10px;">SubSubCatalog</label>
            <select name="SubSubCatalogId" class="form-control" id="select_subsubcatalog" style="margin-left:10px;"></select>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>


<script>
    window.onload = () => {
    let select_catalog = document.getElementById("select_catalog");
    let select_subcatalog = document.getElementById("select_subcatalog");
    let select_subsubcatalog = document.getElementById("select_subsubcatalog");

    var catalogs = @Html.Raw(Json.Encode(catalogs));
    var scs_total = @Html.Raw(Json.Encode(sc));
    var sscs_total = @Html.Raw(Json.Encode(ssc));

    ShowSelect(0);

    function ShowSelect(i) {
        if (i == 0) {
            Clear(select_subcatalog);
            Clear(select_subsubcatalog);

            for (let i = 0; i < scs_total.length; i++) {
                if (scs_total[i].CatalogId == select_catalog.value) {
                    var option = document.createElement("option");
                    option.value = scs_total[i].Id;
                    option.innerText = scs_total[i].Name;
                    select_subcatalog.appendChild(option);
                }
            }

            for (let i = 0; i < sscs_total.length; i++) {
                if (sscs_total[i].SubCatalogId == select_subcatalog.value) {
                    var option = document.createElement("option");
                    option.value = sscs_total[i].Id;
                    option.innerText = sscs_total[i].Name;
                    select_subsubcatalog.appendChild(option);
                }
            }
        }

        if (i == 1) {
            Clear(select_subsubcatalog);

            for (let i = 0; i < sscs_total.length; i++) {
                if (sscs_total[i].SubCatalogId == select_subcatalog.value) {
                    var option = document.createElement("option");
                    option.value = sscs_total[i].Id;
                    option.innerText = sscs_total[i].Name;
                    select_subsubcatalog.appendChild(option);
                }
            }
        }
    }


    function Clear(element) {
        while (element.firstChild) {
            element.removeChild(element.firstChild);
        }
    }

    select_catalog.onchange = () => {
        ShowSelect(0);
    }

    select_subcatalog.onchange = () => {
        ShowSelect(1);
    }
}
</script>